
describe('onClickFilter', () => {
    it('should open filter dialog and handle submit event', () => {
        const mockDialogRef = {
            componentInstance: {
                submitEvent: of({
                    eventType: 'submit',
                    elements: [
                        {
                            label: 'Dashboard',
                            selectedValue: {
                                ...mockSchedule,
                                title: 'Updated Schedule'
                            }
                        },
                        {
                            label: 'Year',
                            selectedValue: ['2025']
                        }
                    ]
                })
            }
        };
        mockDialog.open.mockReturnValue(mockDialogRef as any);
        const onSchedulesChangeSpy = jest.spyOn(component, 'onSchedulesChange');

        component.onClickFilter();

        expect(mockDialog.open).toHaveBeenCalled();
        expect(component.displayedGanttBars).toEqual([]);
        expect(component.selectedYear).toEqual(['2025']);
        expect(component.selectedAssetScheduleTitle).toBe('Updated Schedule');
        expect(onSchedulesChangeSpy).toHaveBeenCalledWith({
            ...mockSchedule,
            title: 'Updated Schedule'
        });
        expect(component.calendarService.selectedCard).toEqual({
            year: ['2025'],
            scheduleTitle: 'Updated Schedule'
        });
    });

    it('should handle groupDropdown event type', () => {
        const mockDialogRef = {
            componentInstance: {
                submitEvent: of({
                    eventType: 'groupDropdown',
                    elements: [
                        {
                            label: 'Dashboard',
                            selectedValue: {
                                ...mockSchedule,
                                assetSchedules: [mockAssetSchedule]
                            }
                        }
                    ]
                })
            }
        };
        mockDialog.open.mockReturnValue(mockDialogRef as any);
        const getFilteredAssetScheduleSpy = jest.spyOn(component as any, 'getFilteredAssetSchedule');
        const setFilterYearElementSpy = jest.spyOn(component, 'setFilterYearElement');

        component.onClickFilter();

        expect(getFilteredAssetScheduleSpy).toHaveBeenCalledWith(
            mockSchedule,
            [mockAssetSchedule]
        );
        expect(setFilterYearElementSpy).toHaveBeenCalled();
    });

    it('should handle filter modal without year element', () => {
        const mockDialogRef = {
            componentInstance: {
                submitEvent: of({
                    eventType: 'submit',
                    elements: [
                        {
                            label: 'Dashboard',
                            selectedValue: mockSchedule
                        }
                        // No year element
                    ]
                })
            }
        };
        mockDialog.open.mockReturnValue(mockDialogRef as any);

        component.onClickFilter();

        expect(component.selectedAssetScheduleTitle).toBe('Test Schedule');
    });

    it('should handle filter modal without dashboard element', () => {
        const mockDialogRef = {
            componentInstance: {
                submitEvent: of({
                    eventType: 'submit',
                    elements: [
                        {
                            label: 'Year',
                            selectedValue: ['2025']
                        }
                        // No dashboard element
                    ]
                })
            }
        };
        mockDialog.open.mockReturnValue(mockDialogRef as any);

        component.onClickFilter();

        expect(component.selectedYear).toEqual(['2025']);
    });
});
