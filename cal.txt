describe('onSearchValueChanged', () => {
    it('should filter data cards based on search term', () => {
        component.dataCards = [
            { ...mockDataCard, secondRow: 'Asset1' },
            { ...mockDataCard, secondRow: 'Asset2' }
        ];
        
        component.onSearchValueChanged('Asset1');
        
        expect(component.dataCards[0].visible).toBe(true);
        expect(component.dataCards[1].visible).toBe(false);
    });

    it('should track search event when term is not empty', () => {
        component.onSearchValueChanged('Asset1');
        expect(mockAppAnalyticsService.trackEvent).toHaveBeenCalled();
    });

    it('should not track search event when term is empty', () => {
        component.onSearchValueChanged('');
        expect(mockAppAnalyticsService.trackEvent).not.toHaveBeenCalled();
    });
});

describe('onClickDataCard', () => {
    it('should navigate to overview page', () => {
        component.onClickDataCard({ data: { secondRow: 'Asset1' } });
        expect(mockRouter.navigate).toHaveBeenCalledWith(['/V3/platform/Asset1/overview']);
        expect(mockAppAnalyticsService.trackEvent).toHaveBeenCalled();
    });

    it('should show error when navigation fails', () => {
        component.onClickDataCard({ data: {} });
        expect(mockNotificationsService.error).toHaveBeenCalled();
    });
});

describe('onClickAddNew', () => {
    it('should open add new dialog and handle submit', () => {
        const mockDialogRef = { componentInstance: { submitEvent: new Subject() } };
        mockDialog.open.mockReturnValue(mockDialogRef as any);
        mockAssetScheduleApiService.getAllAssets.mockReturnValue(of([]));
        
        component.onClickAddNew();
        
        expect(mockDialog.open).toHaveBeenCalled();
        expect(mockAppAnalyticsService.trackEvent).toHaveBeenCalled();
        expect(mockAssetScheduleApiService.getAllAssets).toHaveBeenCalled();
        
        // Simulate submit event
        mockDialogRef.componentInstance.submitEvent.next({
            eventType: 'submit',
            elements: []
        });
        
        expect(mockCalendarService.prepareAssetScheduleData).toHaveBeenCalled();
    });
});


describe('setDateRangeDate', () => {
    beforeEach(() => {
        component.ganttBars = [
            { 
                ...mockGanttBar,
                startDate: new Date().toLocaleDateString('en-US', dateOptions),
                endDate: new Date(Date.now() + 30 * 24 * 60 * 60 * 1000).toLocaleDateString('en-US', dateOptions)
            },
            {
                ...mockGanttBar,
                barTitle: 'Asset2',
                startDate: new Date(Date.now() + 365 * 24 * 60 * 60 * 1000).toLocaleDateString('en-US', dateOptions)
            }
        ];
    });

    it('should filter gantt bars for 6 months range', () => {
        component.dateRange.set('6 Months');
        component.setDateRangeDate();
        expect(component.displayedGanttBars.length).toBe(1);
    });

    it('should filter gantt bars for 1 year range', () => {
        component.dateRange.set('1 Years');
        component.setDateRangeDate();
        expect(component.displayedGanttBars.length).toBe(1);
    });

    it('should show all gantt bars when range is none', () => {
        component.dateRange.set('none');
        component.setDateRangeDate();
        expect(component.displayedGanttBars.length).toBe(2);
    });
});
