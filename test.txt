describe('ngOnInit', () => {
    it('should initialize tour and breadcrumbs when browser not refreshed', () => {
      mockBrowserRefreshedService.getBrowserRefreshed.mockReturnValue(false);
      
      component.ngOnInit();
      
      expect(mockEnableTourService.initializeTour).toHaveBeenCalled();
      expect(mockBreadcrumbService.createBreadcrumbs).toHaveBeenCalledWith(mockActivatedRoute, 'Dashboard');
    });

    it('should handle breadcrumbs when browser refreshed and breadcrumbs exist', () => {
      mockBrowserRefreshedService.getBrowserRefreshed.mockReturnValue(true);
      mockBreadcrumbService.getBreadcrumbs = [{ label: 'Test', url: '/test' }];
      
      component.ngOnInit();
      
      expect(mockBreadcrumbService.setBreadcrumbs).toHaveBeenCalled();
    });

    it('should create breadcrumbs when browser refreshed but no breadcrumbs exist', () => {
      mockBrowserRefreshedService.getBrowserRefreshed.mockReturnValue(true);
      mockBreadcrumbService.getBreadcrumbs = [];
      
      component.ngOnInit();
      
      expect(mockBreadcrumbService.createBreadcrumbs).toHaveBeenCalledWith(mockActivatedRoute, 'Dashboard');
    });

    it('should set addNewCard based on admin user status', () => {
      mockAppAuthService.isAdminUser.mockReturnValue(true);
      
      component.ngOnInit();
      
      expect(component.addNewCard.showAddNew).toBe(true);
      expect(component.addNewCard.thirdRow).toBe('Add New');
    });

    it('should handle tour end subscription when tour is disabled', () => {
      const tourEndSubject = new Subject();
      const mockTourService = {
        start: jest.fn(),
        end$: tourEndSubject
      };
      mockEnableTourService.getTourService.mockReturnValue(mockTourService);
      mockEnableTourService.getEnableTour.mockReturnValue(false);
      
      component.ngOnInit();
      tourEndSubject.next();
      
      expect(mockUiTourPreferenceService.handleDisableTourForModule).toHaveBeenCalledWith('calendar');
    });

    it('should handle tour end subscription when tour is enabled', () => {
      const tourEndSubject = new Subject();
      const mockTourService = {
        start: jest.fn(),
        end$: tourEndSubject
      };
      mockEnableTourService.getTourService.mockReturnValue(mockTourService);
      mockEnableTourService.getEnableTour.mockReturnValue(true);
      
      component.ngOnInit();
      tourEndSubject.next();
      
      expect(mockEnableTourService.toggleEnableTour).toHaveBeenCalled();
    });
  });

  describe('ngAfterViewInit', () => {
    it('should start tour when required', () => {
      mockUiTourPreferenceService.isTourRequired.mockReturnValue(of(true));
      mockEnableTourService.startTourWhenReady.mockReturnValue(of({}));
      
      component.ngAfterViewInit();
      
      expect(mockEnableTourService.startTourWhenReady).toHaveBeenCalled();
    });

    it('should not start tour when not required', () => {
      mockUiTourPreferenceService.isTourRequired.mockReturnValue(of(false));
      
      component.ngAfterViewInit();
      
      expect(mockEnableTourService.startTourWhenReady).not.toHaveBeenCalled();
    });
  });

  describe('ngOnDestroy', () => {
    it('should unsubscribe from subscriptions', () => {
      const unsubscribeSpy = jest.spyOn(component['subscriptions'], 'unsubscribe');
      
      component.ngOnDestroy();
      
      expect(unsubscribeSpy).toHaveBeenCalled();
    });
  });
