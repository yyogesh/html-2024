import { TestBed } from '@angular/core/testing';
import { Observable, of, throwError } from 'rxjs';
import { ConfigApiService } from './config-api.service';
import { AppBaseApiService } from './app-base-api.service';
import { BaseConfigAPIService, HostingEnvironmentService } from '@missionaccelerator/common/service';
import { Platform } from '@customTypes/platform.interface';

describe('ConfigApiService', () => {
    let service: ConfigApiService;
    let mockAppBaseApiService: jest.Mocked<AppBaseApiService>;
    let mockHostingEnvironmentService: jest.Mocked<HostingEnvironmentService>;

    const mockPlatforms: Platform[] = [
        {
            id: '1',
            name: 'Platform 1',
            description: 'Test Platform 1'
        } as Platform,
        {
            id: '2',
            name: 'Platform 2',
            description: 'Test Platform 2'
        } as Platform
    ];

    beforeEach(() => {
        const appBaseApiServiceMock = {
            get: jest.fn(),
            post: jest.fn(),
            put: jest.fn(),
            delete: jest.fn(),
            patch: jest.fn()
        } as jest.Mocked<AppBaseApiService>;

        const hostingEnvironmentServiceMock = {
            getCurrentEnvironment: jest.fn(),
            getEnvironmentConfig: jest.fn()
        } as jest.Mocked<HostingEnvironmentService>;

        TestBed.configureTestingModule({
            providers: [
                ConfigApiService,
                { provide: AppBaseApiService, useValue: appBaseApiServiceMock },
                { provide: HostingEnvironmentService, useValue: hostingEnvironmentServiceMock }
            ]
        });

        service = TestBed.inject(ConfigApiService);
        mockAppBaseApiService = TestBed.inject(AppBaseApiService) as jest.Mocked<AppBaseApiService>;
        mockHostingEnvironmentService = TestBed.inject(HostingEnvironmentService) as jest.Mocked<HostingEnvironmentService>;
    });

    afterEach(() => {
        jest.clearAllMocks();
    });

    describe('Service Initialization', () => {
        it('should be created', () => {
            expect(service).toBeTruthy();
        });

        it('should be an instance of BaseConfigAPIService', () => {
            expect(service instanceof BaseConfigAPIService).toBeTruthy();
        });

        it('should be provided in root', () => {
            expect(service).toBeDefined();
        });

        it('should have configPath property set correctly', () => {
            const configPath = (service as any).configPath;
            expect(configPath).toBe('config/');
        });
    });
