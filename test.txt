 describe('requestAppConfig', () => {
    it('should load config successfully', (done) => {
      service.requestAppConfig().subscribe({
        next: (result) => {
          expect(result).toBe(true);
          expect(configApiService.getHostingEnvironment).toHaveBeenCalled();
          expect(configApiService.getPlatformConfig).toHaveBeenCalled();
          expect(configApiService.getLegalMarkings).toHaveBeenCalled();
          expect(configApiService.getLinks).toHaveBeenCalled();
          expect(configApiService.getJiraURL).toHaveBeenCalled();
          expect(matomoInitializer.initializeTracker).toHaveBeenCalled();
          done();
        }
      });
    });

    it('should handle empty platform config', (done) => {
      configApiService.getPlatformConfig.mockReturnValue(of([]));
      
      service.requestAppConfig().subscribe({
        next: (result) => {
          expect(result).toBe(false);
          done();
        }
      });
    });

    it('should handle API errors', (done) => {
      configApiService.getPlatformConfig.mockReturnValue(throwError('API Error'));
      
      service.requestAppConfig().subscribe({
        error: (error) => {
          expect(error).toBe(false);
          done();
        }
      });
    });

    it('should return true if config is already loaded', (done) => {
      // First load
      service.requestAppConfig().subscribe(() => {
        // Second load should return immediately
        service.requestAppConfig().subscribe({
          next: (result) => {
            expect(result).toBe(true);
            done();
          }
        });
      });
    });
  });
