 describe('Constructor', () => {
        it('should initialize with required dependencies', () => {
            expect(service).toBeDefined();
            expect(mockAppBaseApiService).toBeDefined();
            expect(mockHostingEnvironmentService).toBeDefined();
        });

        it('should call super constructor with correct parameters', () => {
            expect(service instanceof BaseConfigAPIService).toBeTruthy();
        });
    });

    describe('getPlatformConfig()', () => {
        it('should be defined', () => {
            expect(service.getPlatformConfig).toBeDefined();
        });

        it('should return an Observable', () => {
            mockAppBaseApiService.get.mockReturnValue(of(mockPlatforms));
            
            const result = service.getPlatformConfig();
            
            expect(result instanceof Observable).toBeTruthy();
        });

        it('should call baseAPIServices.get with correct URL', () => {
            mockAppBaseApiService.get.mockReturnValue(of(mockPlatforms));
            
            service.getPlatformConfig();
            
            expect(mockAppBaseApiService.get).toHaveBeenCalledWith('config/platforms');
        });

        it('should call baseAPIServices.get exactly once', () => {
            mockAppBaseApiService.get.mockReturnValue(of(mockPlatforms));
            
            service.getPlatformConfig();
            
            expect(mockAppBaseApiService.get).toHaveBeenCalledTimes(1);
        });

        it('should return Platform array on successful API call', (done) => {
            mockAppBaseApiService.get.mockReturnValue(of(mockPlatforms));
            
            service.getPlatformConfig().subscribe(result => {
                expect(result).toEqual(mockPlatforms);
                expect(Array.isArray(result)).toBeTruthy();
                expect(result.length).toBe(2);
                done();
            });
        });

        it('should return empty array when API returns empty response', (done) => {
            const emptyResponse: Platform[] = [];
            mockAppBaseApiService.get.mockReturnValue(of(emptyResponse));
            
            service.getPlatformConfig().subscribe(result => {
                expect(result).toEqual([]);
                expect(Array.isArray(result)).toBeTruthy();
                expect(result.length).toBe(0);
                done();
            });
        });

        it('should handle API error', (done) => {
            const errorResponse = new Error('API Error');
            mockAppBaseApiService.get.mockReturnValue(throwError(() => errorResponse));
            
            service.getPlatformConfig().subscribe({
                next: () => {
                    fail('Should not emit next value on error');
                },
                error: (error) => {
                    expect(error).toBe(errorResponse);
                    done();
                }
            });
        });

        it('should pass through HTTP error status', (done) => {
            const httpError = {
                status: 404,
                message: 'Not Found',
                error: 'Platforms not found'
            };
            mockAppBaseApiService.get.mockReturnValue(throwError(() => httpError));
            
            service.getPlatformConfig().subscribe({
                next: () => {
                    fail('Should not emit next value on error');
                },
                error: (error) => {
                    expect(error.status).toBe(404);
                    expect(error.message).toBe('Not Found');
                    done();
                }
            });
        });

        it('should handle network error', (done) => {
            const networkError = new Error('Network Error');
            mockAppBaseApiService.get.mockReturnValue(throwError(() => networkError));
            
            service.getPlatformConfig().subscribe({
                next: () => {
                    fail('Should not emit next value on error');
                },
                error: (error) => {
                    expect(error.message).toBe('Network Error');
                    done();
                }
            });
        });

        it('should return Observable that completes', (done) => {
            mockAppBaseApiService.get.mockReturnValue(of(mockPlatforms));
            
            service.getPlatformConfig().subscribe({
                next: (result) => {
                    expect(result).toEqual(mockPlatforms);
                },
                complete: () => {
                    done();
                }
            });
        });
    });
