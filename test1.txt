import { useEffect, useMemo, useRef } from 'react';

/**
 * A hook to debounce a function.
 * @param {Function} callback - The function to debounce.
 * @param {number} delay - The debounce delay in milliseconds.
 * @returns {Function} The debounced function.
 */
export const useDebounce = (callback, delay) => {
    const callbackRef = useRef(callback);

    useEffect(() => {
        callbackRef.current = callback;
    }, [callback]);

    return useMemo(() => {
        let timer;
        return (...args) => {
            clearTimeout(timer);
            timer = setTimeout(() => {
                callbackRef.current(...args);
            }, delay);
        };
    }, [delay]);
};
