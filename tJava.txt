package com.optum.ofsc.hba.client.controller;

import com.optum.ofsc.hba.client.entity.ClientPortal;
import com.optum.ofsc.hba.client.model.ClientPortalRequest;
import com.optum.ofsc.hba.client.model.ClientPortalResponse;
import com.optum.ofsc.hba.client.service.ClientPortalService;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.DisplayName;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;

import java.util.Arrays;
import java.util.Collections;
import java.util.List;

import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.ArgumentMatchers.any;
import static org.mockito.Mockito.*;

@ExtendWith(MockitoExtension.class)
@DisplayName("ClientPortalController Tests")
class ClientPortalControllerTest {

    @Mock
    private ClientPortalService clientPortalService;

    @InjectMocks
    private ClientPortalController clientPortalController;

    private ClientPortalRequest clientPortalRequest;
    private List<ClientPortal> savedClientPortals;

    @BeforeEach
    void setUp() {
        // Setup test data
        clientPortalRequest = new ClientPortalRequest();
        clientPortalRequest.setClientID("CLIENT-001");
        
        savedClientPortals = Arrays.asList(
            createClientPortal("1"),
            createClientPortal("2")
        );
    }

    @Test
    @DisplayName("Should create client portal successfully")
    void createClientPortal_Success() {
        // Given
        when(clientPortalService.saveClientPortal(any(ClientPortalRequest.class)))
                .thenReturn(savedClientPortals);

        // When
        ResponseEntity<List<ClientPortalResponse>> response = 
            clientPortalController.createClientPortal(clientPortalRequest);

        // Then
        assertNotNull(response);
        assertEquals(HttpStatus.CREATED, response.getStatusCode());
        assertNotNull(response.getBody());
        // We can't test the exact size since mapper is real, but we can test structure
        assertTrue(response.getBody() instanceof List);

        // Verify service interaction
        verify(clientPortalService, times(1)).saveClientPortal(any(ClientPortalRequest.class));
    }

    @Test
    @DisplayName("Should handle empty client portal list")
    void createClientPortal_EmptyList() {
        // Given
        List<ClientPortal> emptyList = Collections.emptyList();
        
        when(clientPortalService.saveClientPortal(any(ClientPortalRequest.class)))
                .thenReturn(emptyList);

        // When
        ResponseEntity<List<ClientPortalResponse>> response = 
            clientPortalController.createClientPortal(clientPortalRequest);

        // Then
        assertNotNull(response);
        assertEquals(HttpStatus.CREATED, response.getStatusCode());
        assertNotNull(response.getBody());
        assertTrue(response.getBody().isEmpty());

        verify(clientPortalService, times(1)).saveClientPortal(any(ClientPortalRequest.class));
    }

    @Test
    @DisplayName("Should handle single client portal")
    void createClientPortal_SinglePortal() {
        // Given
        List<ClientPortal> singlePortal = Arrays.asList(createClientPortal("1"));
        
        when(clientPortalService.saveClientPortal(any(ClientPortalRequest.class)))
                .thenReturn(singlePortal);

        // When
        ResponseEntity<List<ClientPortalResponse>> response = 
            clientPortalController.createClientPortal(clientPortalRequest);

        // Then
        assertNotNull(response);
        assertEquals(HttpStatus.CREATED, response.getStatusCode());
        assertNotNull(response.getBody());
        assertEquals(1, response.getBody().size());

        verify(clientPortalService, times(1)).saveClientPortal(any(ClientPortalRequest.class));
    }

    @Test
    @DisplayName("Should propagate service exceptions")
    void createClientPortal_ServiceException() {
        // Given
        when(clientPortalService.saveClientPortal(any(ClientPortalRequest.class)))
                .thenThrow(new RuntimeException("Service error"));

        // When & Then
        RuntimeException exception = assertThrows(RuntimeException.class, () -> 
            clientPortalController.createClientPortal(clientPortalRequest));
        
        assertEquals("Service error", exception.getMessage());
        verify(clientPortalService, times(1)).saveClientPortal(any(ClientPortalRequest.class));
    }

    @Test
    @DisplayName("Should handle null request with NullPointerException")
    void createClientPortal_NullRequest_ThrowsNPE() {
        // When & Then - This will throw NPE due to clientPortalRequest.getClientID() in log statement
        assertThrows(NullPointerException.class, () -> 
            clientPortalController.createClientPortal(null));
    }

    @Test
    @DisplayName("Should verify correct client ID usage")
    void createClientPortal_VerifyClientIdUsage() {
        // Given
        ClientPortalRequest specificRequest = new ClientPortalRequest();
        specificRequest.setClientID("TEST-123");
        
        when(clientPortalService.saveClientPortal(any(ClientPortalRequest.class)))
                .thenReturn(savedClientPortals);

        // When
        ResponseEntity<List<ClientPortalResponse>> response = 
            clientPortalController.createClientPortal(specificRequest);

        // Then
        assertNotNull(response);
        assertEquals(HttpStatus.CREATED, response.getStatusCode());
        verify(clientPortalService, times(1)).saveClientPortal(any(ClientPortalRequest.class));
        assertEquals("TEST-123", specificRequest.getClientID());
    }

    // Helper method to create test ClientPortal
    private ClientPortal createClientPortal(String id) {
        ClientPortal portal = new ClientPortal();
        // Set any required fields here if needed
        return portal;
    }
}
