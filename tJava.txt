package com.optum.ofsc.hba.client.controller;

import com.optum.ofsc.hba.client.entity.ClientPortal;
import com.optum.ofsc.hba.client.mappers.ClientPortalMapper;
import com.optum.ofsc.hba.client.model.ClientPortalRequest;
import com.optum.ofsc.hba.client.model.ClientPortalResponse;
import com.optum.ofsc.hba.client.service.ClientPortalService;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.DisplayName;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.MockedStatic;
import org.mockito.junit.jupiter.MockitoExtension;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;

import java.util.Arrays;
import java.util.Collections;
import java.util.List;

import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.Mockito.*;

@ExtendWith(MockitoExtension.class)
@DisplayName("ClientPortalController Tests")
class ClientPortalControllerTest {

    @Mock
    private ClientPortalService clientPortalService;

    @InjectMocks
    private ClientPortalController clientPortalController;

    private ClientPortalRequest clientPortalRequest;
    private List<ClientPortal> savedClientPortals;
    private List<ClientPortalResponse> clientPortalResponses;

    @BeforeEach
    void setUp() {
        // Setup test data
        clientPortalRequest = new ClientPortalRequest();
        clientPortalRequest.setClientID("CLIENT-001");
        
        savedClientPortals = Arrays.asList(
            new ClientPortal(),
            new ClientPortal()
        );
        
        clientPortalResponses = Arrays.asList(
            createClientPortalResponse("1"),
            createClientPortalResponse("2")
        );
    }

    @Test
    @DisplayName("Should create client portal successfully")
    void createClientPortal_Success() {
        // Given
        when(clientPortalService.saveClientPortal(clientPortalRequest))
                .thenReturn(savedClientPortals);

        // Mock the static mapper
        try (MockedStatic<ClientPortalMapper> mapperMock = mockStatic(ClientPortalMapper.class)) {
            mapperMock.when(() -> ClientPortalMapper.INSTANCE.toClientPortalResponseList(savedClientPortals))
                    .thenReturn(clientPortalResponses);

            // When
            ResponseEntity<List<ClientPortalResponse>> response = 
                clientPortalController.createClientPortal(clientPortalRequest);

            // Then
            assertNotNull(response);
            assertEquals(HttpStatus.CREATED, response.getStatusCode());
            assertNotNull(response.getBody());
            assertEquals(2, response.getBody().size());

            // Verify interactions
            verify(clientPortalService).saveClientPortal(clientPortalRequest);
        }
    }

    @Test
    @DisplayName("Should handle empty client portal list")
    void createClientPortal_EmptyList() {
        // Given
        List<ClientPortal> emptyList = Collections.emptyList();
        List<ClientPortalResponse> emptyResponseList = Collections.emptyList();
        
        when(clientPortalService.saveClientPortal(clientPortalRequest))
                .thenReturn(emptyList);

        try (MockedStatic<ClientPortalMapper> mapperMock = mockStatic(ClientPortalMapper.class)) {
            mapperMock.when(() -> ClientPortalMapper.INSTANCE.toClientPortalResponseList(emptyList))
                    .thenReturn(emptyResponseList);

            // When
            ResponseEntity<List<ClientPortalResponse>> response = 
                clientPortalController.createClientPortal(clientPortalRequest);

            // Then
            assertNotNull(response);
            assertEquals(HttpStatus.CREATED, response.getStatusCode());
            assertNotNull(response.getBody());
            assertTrue(response.getBody().isEmpty());

            verify(clientPortalService).saveClientPortal(clientPortalRequest);
        }
    }

    @Test
    @DisplayName("Should handle single client portal")
    void createClientPortal_SinglePortal() {
        // Given
        List<ClientPortal> singlePortal = Arrays.asList(new ClientPortal());
        List<ClientPortalResponse> singleResponse = Arrays.asList(createClientPortalResponse("1"));
        
        when(clientPortalService.saveClientPortal(clientPortalRequest))
                .thenReturn(singlePortal);

        try (MockedStatic<ClientPortalMapper> mapperMock = mockStatic(ClientPortalMapper.class)) {
            mapperMock.when(() -> ClientPortalMapper.INSTANCE.toClientPortalResponseList(singlePortal))
                    .thenReturn(singleResponse);

            // When
            ResponseEntity<List<ClientPortalResponse>> response = 
                clientPortalController.createClientPortal(clientPortalRequest);

            // Then
            assertNotNull(response);
            assertEquals(HttpStatus.CREATED, response.getStatusCode());
            assertNotNull(response.getBody());
            assertEquals(1, response.getBody().size());

            verify(clientPortalService).saveClientPortal(clientPortalRequest);
        }
    }

    @Test
    @DisplayName("Should propagate service exceptions")
    void createClientPortal_ServiceException() {
        // Given
        when(clientPortalService.saveClientPortal(clientPortalRequest))
                .thenThrow(new RuntimeException("Service error"));

        // When & Then
        RuntimeException exception = assertThrows(RuntimeException.class, () -> 
            clientPortalController.createClientPortal(clientPortalRequest));
        
        assertEquals("Service error", exception.getMessage());
        verify(clientPortalService).saveClientPortal(clientPortalRequest);
    }

    @Test
    @DisplayName("Should handle null request gracefully")
    void createClientPortal_NullRequest() {
        // Given
        when(clientPortalService.saveClientPortal(null))
                .thenReturn(savedClientPortals);

        try (MockedStatic<ClientPortalMapper> mapperMock = mockStatic(ClientPortalMapper.class)) {
            mapperMock.when(() -> ClientPortalMapper.INSTANCE.toClientPortalResponseList(savedClientPortals))
                    .thenReturn(clientPortalResponses);

            // When
            ResponseEntity<List<ClientPortalResponse>> response = 
                clientPortalController.createClientPortal(null);

            // Then
            assertNotNull(response);
            assertEquals(HttpStatus.CREATED, response.getStatusCode());

            verify(clientPortalService).saveClientPortal(null);
        }
    }

    @Test
    @DisplayName("Should verify correct client ID logging")
    void createClientPortal_VerifyClientIdUsage() {
        // Given
        ClientPortalRequest specificRequest = new ClientPortalRequest();
        specificRequest.setClientID("TEST-123");
        
        when(clientPortalService.saveClientPortal(specificRequest))
                .thenReturn(savedClientPortals);

        try (MockedStatic<ClientPortalMapper> mapperMock = mockStatic(ClientPortalMapper.class)) {
            mapperMock.when(() -> ClientPortalMapper.INSTANCE.toClientPortalResponseList(savedClientPortals))
                    .thenReturn(clientPortalResponses);

            // When
            clientPortalController.createClientPortal(specificRequest);

            // Then
            verify(clientPortalService).saveClientPortal(specificRequest);
            assertEquals("TEST-123", specificRequest.getClientID());
        }
    }

    // Helper method to create test response
    private ClientPortalResponse createClientPortalResponse(String id) {
        ClientPortalResponse response = new ClientPortalResponse();
        response.setClientID(id);
        return response;
    }
}
